name: Multi-version Release

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      mod_version: ${{ steps.props.outputs.mod_version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Read mod version
        id: props
        run: |
          set -euo pipefail
          MOD_VERSION=$(grep '^mod_version=' gradle.properties | cut -d'=' -f2 | tr -d '"[:space:]')
          if [ -z "$MOD_VERSION" ]; then
            echo "Unable to determine mod_version from gradle.properties" >&2
            exit 1
          fi
          echo "mod_version=$MOD_VERSION" >> "$GITHUB_OUTPUT"
          echo "Mod version: $MOD_VERSION"

  build_1_21_1:
    needs: prepare
    uses: ./.github/workflows/build-version.yml
    with:
      mc_version: "1.21.1"
      yarn_version: "1.21.1+build.3"
      fabric_api_version: "0.116.7+1.21.1"
      mod_version: ${{ needs.prepare.outputs.mod_version }}

  build_1_21_2:
    needs: prepare
    uses: ./.github/workflows/build-version.yml
    with:
      mc_version: "1.21.2"
      yarn_version: "1.21.2+build.1"
      fabric_api_version: "0.106.1+1.21.2"
      mod_version: ${{ needs.prepare.outputs.mod_version }}

  build_1_21_3:
    needs: prepare
    uses: ./.github/workflows/build-version.yml
    with:
      mc_version: "1.21.3"
      yarn_version: "1.21.3+build.2"
      fabric_api_version: "0.114.1+1.21.3"
      mod_version: ${{ needs.prepare.outputs.mod_version }}

  build_1_21_4:
    needs: prepare
    uses: ./.github/workflows/build-version.yml
    with:
      mc_version: "1.21.4"
      yarn_version: "1.21.4+build.8"
      fabric_api_version: "0.119.4+1.21.4"
      mod_version: ${{ needs.prepare.outputs.mod_version }}

  build_1_21_5:
    needs: prepare
    uses: ./.github/workflows/build-version.yml
    with:
      mc_version: "1.21.5"
      yarn_version: "1.21.5+build.1"
      fabric_api_version: "0.128.2+1.21.5"
      mod_version: ${{ needs.prepare.outputs.mod_version }}

  build_1_21_6:
    needs: prepare
    uses: ./.github/workflows/build-version.yml
    with:
      mc_version: "1.21.6"
      yarn_version: "1.21.6+build.1"
      fabric_api_version: "0.128.2+1.21.6"
      mod_version: ${{ needs.prepare.outputs.mod_version }}

  build_1_21_7:
    needs: prepare
    uses: ./.github/workflows/build-version.yml
    with:
      mc_version: "1.21.7"
      yarn_version: "1.21.7+build.8"
      fabric_api_version: "0.129.0+1.21.7"
      mod_version: ${{ needs.prepare.outputs.mod_version }}

  build_1_21_8:
    needs: prepare
    uses: ./.github/workflows/build-version.yml
    with:
      mc_version: "1.21.8"
      yarn_version: "1.21.8+build.1"
      fabric_api_version: "0.136.0+1.21.8"
      mod_version: ${{ needs.prepare.outputs.mod_version }}

  build_1_21_9:
    needs: prepare
    uses: ./.github/workflows/build-version.yml
    with:
      mc_version: "1.21.9"
      yarn_version: "1.21.9+build.1"
      fabric_api_version: "0.134.0+1.21.9"
      mod_version: ${{ needs.prepare.outputs.mod_version }}

  build_1_21_10:
    needs: prepare
    uses: ./.github/workflows/build-version.yml
    with:
      mc_version: "1.21.10"
      yarn_version: "1.21.10+build.2"
      fabric_api_version: "0.135.0+1.21.10"
      mod_version: ${{ needs.prepare.outputs.mod_version }}

  release:
    name: Release & Publish
    needs:
      - prepare
      - build_1_21_1
      - build_1_21_2
      - build_1_21_3
      - build_1_21_4
      - build_1_21_5
      - build_1_21_6
      - build_1_21_7
      - build_1_21_8
      - build_1_21_9
      - build_1_21_10
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download built artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Organize artifacts
        id: organize
        run: |
          set -euo pipefail
          mkdir -p artifacts
          mapfile -t FILES < <(find dist -type f -name 'namehistory-*.jar' | sort)
          if [ ${#FILES[@]} -eq 0 ]; then
            echo "No artifacts found" >&2
            exit 1
          fi
          : > release_notes.md
          echo "## ðŸ’œ Name History Mod" >> release_notes.md
          echo "" >> release_notes.md
          echo "**Version:** ${{ needs.prepare.outputs.mod_version }}" >> release_notes.md
          echo "**Build:** #${{ github.run_number }}" >> release_notes.md
          echo "**Commit:** ${{ github.sha }}" >> release_notes.md
          echo "" >> release_notes.md
          echo "### Included Minecraft versions" >> release_notes.md
          echo "" >> release_notes.md
          for file in "${FILES[@]}"; do
            MC_VERSION=$(basename "$file" | sed -E 's/^namehistory-[^-]+-([0-9]+\.[0-9]+\.[0-9]+)-fabric\.jar$/\1/')
            cp "$file" artifacts/
            echo "- ${MC_VERSION}" >> release_notes.md
          done
          echo "" >> release_notes.md
          echo "Artifacts ready:" >&2
          ls -R artifacts >&2
          echo "notes=release_notes.md" >> "$GITHUB_OUTPUT"

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.prepare.outputs.mod_version }}-build-${{ github.run_number }}
          name: Name History v${{ needs.prepare.outputs.mod_version }}
          body_path: ${{ steps.organize.outputs.notes }}
          files: artifacts/*.jar
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to Modrinth
        env:
          MOD_VERSION: ${{ needs.prepare.outputs.mod_version }}
          MODRINTH_TOKEN: ${{ secrets.MODRINTH_PUBLISH }}
        run: |
          set -euo pipefail
          if [ -z "${MODRINTH_TOKEN:-}" ]; then
            echo "MODRINTH_PUBLISH secret not configured; skipping Modrinth upload." >&2
            exit 0
          fi
          CHANGELOG=$(git log -1 --pretty=%B)
          STATUS=0
          for file in artifacts/namehistory-*.jar; do
            MC_VERSION=$(basename "$file" | sed -E 's/^namehistory-[^-]+-([0-9]+\.[0-9]+\.[0-9]+)-fabric\.jar$/\1/')
            VERSION_NUMBER="${MOD_VERSION}+${MC_VERSION}"
            PAYLOAD=$(jq -n \
              --arg project "namehistory" \
              --arg version_number "$VERSION_NUMBER" \
              --arg version_name "Name History ${MOD_VERSION} for ${MC_VERSION}" \
              --arg changelog "$CHANGELOG" \
              --arg mc "$MC_VERSION" \
              '{
                project_id: $project,
                version_number: $version_number,
                version_name: $version_name,
                version_type: "release",
                changelog: $changelog,
                game_versions: [$mc],
                loaders: ["fabric"],
                dependencies: [
                  {project_id: "fabric-api", dependency_type: "required"},
                  {project_id: "fabric-language-kotlin", dependency_type: "required"},
                  {project_id: "modmenu", dependency_type: "optional"}
                ]
              }')

            echo "Publishing $file to Modrinth as $VERSION_NUMBER"
            HTTP_CODE=$(curl \
              --silent --show-error --write-out '%{http_code}' --output response.json \
              -X POST https://api.modrinth.com/v2/version \
              -H "Authorization: $MODRINTH_TOKEN" \
              -H "User-Agent: namehistory-ci/1.0" \
              -F "data=$PAYLOAD" \
              -F "file=@$file")

            if [ "$HTTP_CODE" -ge 400 ]; then
              echo "Failed to publish $file (HTTP $HTTP_CODE)" >&2
              cat response.json >&2 || true
              STATUS=1
            else
              echo "Published $file (HTTP $HTTP_CODE)"
            fi
          done
          exit $STATUS
